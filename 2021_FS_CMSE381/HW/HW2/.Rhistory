library(edgeR)
install_github("statOmics/zingeR")
BiocManager::install('IRanges')
library(IRanges)
install_github("statOmics/zingeR")
install_github("statOmics/zingeR")
library(devtools)
install_github("statOmics/zingeR")
library(IRanges)
install_github("statOmics/zingeR")
library(IRanges)
install_github("statOmics/zingeR")
BiocManager::install("DelayedArray")
BiocManager::install("S4Vectors")
BiocManager::install("S4Vectors")
BiocManager::install("S4Vectors")
BiocManager::install("ZingeR")
devtools::install_git("https://git.bioconductor.org/packages/edgeR") #install most recent edgeR version
install_github("statOmics/zingeR")
library(zingeR)
library(devtools)
install_github("statOmics/zingeR")
BiocManager::install('GenomeInfoDb')
install_github("statOmics/zingeR")
library(DESeq2)
install_github("statOmics/zingeR")
library(devtools)
install_github("statOmics/zingeR")
B
BiocManager::install('GenomeInfoDb')
install_github("statOmics/zingeR")
BiocManager::install('GenomeInfoDb')
library(devtools)
BiocManager::install('GenomeInfoDb')
install_github("statOmics/zingeR")
library(DelayedArray)
install_github("statOmics/zingeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
install_github("statOmics/zingeR")
BiocManager::install('XVector')
install.packages('survival')
install_github("statOmics/zingeR")
install.packages('GenomicRanges')
.libPaths()
library('devtools')
install_github("statOmics/zingeR")
.libPaths()
.libPaths()
install_github("statOmics/zingeR")
library(devtools)
install_github("statOmics/zingeR")
.libPaths()
myPaths = .libPaths()
myPaths
myPaths = c(myPaths, 'C:/Users/xyy/Documents/R/win-library/4.2/')
.libPaths(myPaths)
install_github("statOmics/zingeR")
.libPaths()
.libPaths()
library(Seurat)
install_github("statOmics/zingeR")
library(devtools)
install_github("statOmics/zingeR")
library(GenomicRanges)
library(GenomeInfoDb)
.libPaths()
R_LIBS_USE
R_LIBS_USER
install_github("statOmics/zingeR")
install_github("statOmics/zingeR")
install_github("statOmics/zingeR")
library(devtools)
install_github("statOmics/zingeR")
BiocManager::install('GenomicRanges')
install.packages('survival')
BiocManager::install('GenomicRanges')
.libPaths()
install.packages('survival')
install_github("statOmics/zingeR")
BiocManager::install('S4Vectors')
BiocManager::install('iranges')
BiocManager::install('iRanges')
install_github("statOmics/zingeR")
BiocManager::install('S4Vectors')
install_github("statOmics/zingeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("S4Vectors")
library(S4Vectors)
version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
session()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("S4Vectors")
BiocManager::install("S4Vectors")
installed.packages('survival')
installed.packages(survival)
install.packages('survival')
devtools::install_git("https://git.bioconductor.org/packages/edgeR") #install most recent edgeR version
install_github("statOmics/zingeR")
library(devtools)
devtools::install_git("https://git.bioconductor.org/packages/edgeR") #install most recent edgeR version
install_github("statOmics/zingeR")
BiocManager::install('DelayedArray')
install_github("statOmics/zingeR")
library(zingeR)
library(muscat)
?mmDS
vignette('troubleshooting')
?mmDS
data(sce)
# subset "B cells" cluster
sce <- sce[, sce$cluster_id == "B cells"]
sce$cluster_id <- droplevels(sce$cluster_id)
# downsample to 100 genes
gs <- sample(nrow(sce), 100)
sce <- sce[gs, ]
mm = mmDS(sce, method = 'nbinom')
sce
mm = mmDS(sce, method = 'nbinom')
version()
versions()
version
sessionInfo()
data(sce)
# subset "B cells" cluster
sce <- sce[, sce$cluster_id == "B cells"]
sce$cluster_id <- droplevels(sce$cluster_id)
# downsample to 100 genes
gs <- sample(nrow(sce), 100)
sce <- sce[gs, ]
sessionInfo(muscat)
sessionInfo('muscat')
data(sce)
# subset "B cells" cluster
sce <- sce[, sce$cluster_id == "B cells"]
sce$cluster_id <- droplevels(sce$cluster_id)
# downsample to 100 genes
gs <- sample(nrow(sce), 100)
sce <- sce[gs, ]
sce
data(sce)
sce
sce <- sce[, sce$cluster_id == "B cells"]
sce$cluster_id <- droplevels(sce$cluster_id)
sce
gs <- sample(nrow(sce), 100)
sce <- sce[gs, ]
res <- mmDS(sce, method = "nbinom",
n_threads = 2, verbose = FALSE)
res
sessionInfo('muscat')
install.packages('glmmTMB')
install.packages("glmmTMB")
data(sce)
# subset "B cells" cluster
sce <- sce[, sce$cluster_id == "B cells"]
sce$cluster_id <- droplevels(sce$cluster_id)
# downsample to 100 genes
gs <- sample(nrow(sce), 100)
sce <- sce[gs, ]
res <- mmDS(sce, method = "nbinom",
n_threads = 2, verbose = FALSE)
library(muscat)
data(sce)
# subset "B cells" cluster
sce <- sce[, sce$cluster_id == "B cells"]
sce$cluster_id <- droplevels(sce$cluster_id)
# downsample to 100 genes
gs <- sample(nrow(sce), 100)
sce <- sce[gs, ]
res <- mmDS(sce, method = "nbinom",
n_threads = 2, verbose = FALSE)
warnings()
BiocManager::install('muscat')
BiocManager::install('muscat')
remove.packages('dplyr')
BiocManager::install('muscat')
library(SingleR)
?SingleR
16467.75/55000
55000 - 16467.75
library(Seurat)
?subset
?subset
library(phyloseq)
library(qiime2R)
library(tidyverse)
library(tsnemicrobiota)
BiocManager::install('phyloseq')
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
library(glue)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
install.packages('glue')
install.packages("glue")
library(glue)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
BiocManager::install('rhdf5')
library(phyloseq)
library(phyloseq)
library(qiime2R)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
install.packages('ps')
install.packages("ps")
library(pscl)
library(ps)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
install.packages('rlang')
install.packages("rlang")
install.packages('rlang')
library(rlang)
install.packages('rlang')
install.packages('rlang')
library(rlang)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
library(phyloseq)
library(qiime2R)
library(tidyverse)
library(tsnemicrobiota)
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tsnemicrobiota)
install.packages('tsnemicrobiota')
library("devtools")
install_github("opisthokonta/tsnemicrobiota")
A = diag(5)
A
A[1, 2] = A[2, 1] = 0.5
A[2, 5] = A[5, 2] = 0.3
A
A[2, 3] = A[3, 2] = 0.1
A[3, 4] = A[4, 3] = 0.6
eigen(A)
A
B = diag(5)
B[1, 2] = B[2, 1] = 0.3
B[1, 3] = B[3, 1] = 0.25
B[4, 1] = B[1, 4] = 0.4
B[4, 5] = B[5, 4] = 0.3
B
eigen(B)
D = solve(solve(A) + solve(B))
D
image(D)
par(mfrow = c(2, 2))
image(A)
image(B)
image(D)
A
B
D
round(D
)
round(D, 3)
A
V
A
B
round(D, 3)
B
B[4, 5] = B[5, 4] = 0
B
D = solve(solve(A) + solve(B))
image(D)
D
B[4, 5] = B[5, 4] = 0.3
D = solve(solve(A) + solve(B))
round(D, 2)
A
A[3, 2] = A[2, 3] = -0.5
eigen(A)
D = solve(solve(A) + solve(B))
round(D, 2)
A
B
A
B
D
library(SingleR)
?SingleR
ref <- HumanPrimaryCellAtlasData()
ref
ImmGe = ImmGenData()
ImmGe
library(Seurat)
FindAllMarkers
?
?
''
q
?FindAllMarkers
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "Kang")
(sce <- eh[["EH2259"]])
sce <- sce[rowSums(counts(sce) > 0) > 0, ]
dim(sce)
library(scater)
qc <- perCellQCMetrics(sce)
# remove cells with few or many detected genes
ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE)
sce <- sce[, !ol]
dim(sce)
sce <- sce[rowSums(counts(sce) > 1) >= 10, ]
dim(sce)
## [1]  7118 26820
sce <- computeLibraryFactors(sce)
sce <- logNormCounts(sce)
sce$id <- paste0(sce$stim, sce$ind)
(sce <- prepSCE(sce,
kid = "cell", # subpopulation assignments
gid = "stim",  # group IDs (ctrl/stim)
sid = "id",   # sample IDs (ctrl/stim.1234)
drop = TRUE))  # dro
sce$id <- paste0(sce$stim, sce$ind)
(sce <- prepSCE(sce,
kid = "cell", # subpopulation assignments
gid = "stim",  # group IDs (ctrl/stim)
sid = "id",   # sample IDs (ctrl/stim.1234)
drop = TRUE))  # drop all other colData columns
BiocManager::install("muscat")
library(muscat)
sce$id <- paste0(sce$stim, sce$ind)
(sce <- prepSCE(sce,
kid = "cell", # subpopulation assignments
gid = "stim",  # group IDs (ctrl/stim)
sid = "id",   # sample IDs (ctrl/stim.1234)
drop = TRUE))  # drop all other colData columns
nk <- length(kids <- levels(sce$cluster_id))
ns <- length(sids <- levels(sce$sample_id))
names(kids) <- kids; names(sids) <- sids
t(table(sce$cluster_id, sce$sample_id))
sce <- runUMAP(sce, pca = 20)
# wrapper to prettify reduced dimension plots
.plot_dr <- function(sce, dr, col)
plotReducedDim(sce, dimred = dr, colour_by = col) +
guides(fill = guide_legend(override.aes = list(alpha = 1, size = 3))) +
theme_minimal() + theme(aspect.ratio = 1)
cs_by_k <- split(colnames(sce), sce$cluster_id)
cs100 <- unlist(sapply(cs_by_k, function(u)
sample(u, min(length(u), 100))))
# plot t-SNE & UMAP colored by cluster & group ID
for (dr in c("TSNE", "UMAP"))
for (col in c("cluster_id", "group_id"))
.plot_dr(sce[, cs100], dr, col)
.plot_dr(sce[, cs100], dr, col)
.plot_dr(sce[, cs100], 'TSNE', col)
.plot_dr(sce[, cs100], 'TSNE', 'cluster_id')
.plot_dr(sce[, cs100], 'UMAP', 'cluster_id')
.plot_dr(sce[, cs100], 'TSNE', 'cluster_id')
.plot_dr(sce[, cs100], 'TSNE', 'group_')
.plot_dr(sce[, cs100], 'TSNE', 'group_id')
.plot_dr(sce[, cs100], 'TSNE', 'cluster_id')
log(0.5)
0.01 *log(0.01)
getwd()
setwd('C:/Users/xyy/Dropbox (Personal)/Teaching/2021_CMSE381/HW/HW2')
KNN_XYY = function(K, TrainX, TrainY, x){
distX <- (TrainX - x)^2
id <- rank(distX) <= K
Yhat <- median(TrainY[id])
return(Yhat)
}
X <- seq(-2, 2, 0.1)
Result <- matrix(0, length(X), 2)
Result[, 1] = X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] = KNN_XYY(1, TrainX = dat[, 1], dat[, 2], X[i])
}
plot(dat[, 1], dat[, 2])
lines(Result[, 1], Result[, 2], col = 'blue')
a = 1:8
x = 3
a
a - x
(a - x)^2
a = rnorm(10)
a
rank(a)
id = rank(a) <= 5
id
a[id]
KNN_XYY = function(K, TrainX, TrainY, x){
distX <- abs(TrainX - x)
id    <- rank(distX) <= K
Yhat  <- median(TrainY[id])
return(Yhat)
}
X <- seq(-2, 2, 0.16)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 5, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 1, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
X <- seq(-2, 2, 0.16)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 1, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
KNN_XYY = function(K, TrainX, TrainY, x){
p <- dim(TrainX)[2]
n <- dim(TrainX)[1]
Dif <- TrainX - rep(1, n) %*% matrix(x, 1, p)
distX <- sqrt(diag(Dif %*% t(Dif)))
id <- rank(distX) <= K
Yhat <- median(TrainY[id])
return(Yhat)
}
dat = read.csv('Wine.csv')
class(dat)
KNN_XYY(K = 5, TrainX = dat[, 2:3], Train = dat[, 1], x = c(10, 4))
dat = as.matrix(read.csv('wine.csv'))
KNN_XYY(K = 5, TrainX = dat[, 2:3], Train = dat[, 1], x = c(10, 4))
X <- seq(-2, 2, 0.16)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 10, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
KNN_XYY = function(K, TrainX, TrainY, x){
distX <- abs(TrainX - x)
id    <- rank(distX) <= K
Yhat  <- median(TrainY[id])
return(Yhat)
}
X <- seq(-2, 2, 0.16)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 10, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
X <- seq(-2, 2, 0.16)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 100, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
X <- seq(-2, 2, 0.1)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 1, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
KNN_XYY = function(K, TrainX, TrainY, x){
distX <- abs(TrainX - x)
id    <- rank(distX) <= K
Yhat  <- median(TrainY[id])
return(Yhat)
}
X <- seq(-2, 2, 0.1)
Result <- matrix(0, length(X), 2 )
Result[, 1] <- X
dat <- read.csv('Regression.csv')
for(i in 1:length(X)){
Result[i, 2] <- KNN_XYY(K = 1, TrainX = dat[, 1], TrainY = dat[, 2], X[i])
}
plot(dat[, 1], dat[, 3])
lines(Result[, 1], Result[, 2], col = 'blue')
plot(dat[, 1], dat[, 2])
lines(Result[, 1], Result[, 2], col = 'blue')
